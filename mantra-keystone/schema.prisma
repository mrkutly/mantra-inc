// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id       String @id @default(uuid()) @postgresql.Uuid
  name     String @default("")
  email    String @unique @default("")
  password String
}

model Album {
  id        String    @id @default(uuid()) @postgresql.Uuid
  createdAt DateTime? @default(now()) @map("created_at")
  group     String
  title     String    @default("")
  host      String
  embed     String    @default("")
  link      String    @default("")

  @@index([group])
}

model Article {
  id          String    @id @default(uuid()) @postgresql.Uuid
  createdAt   DateTime? @default(now()) @map("created_at")
  group       String
  title       String    @default("")
  publication String    @default("")
  pullQuote   String    @default("") @map("pull_quote")
  author      String    @default("")
  link        String    @default("")

  @@index([group])
}

model Video {
  id        String    @id @default(uuid()) @postgresql.Uuid
  createdAt DateTime? @default(now()) @map("created_at")
  group     String
  title     String    @default("")
  embed     String    @default("")

  @@index([group])
}

model Team {
  id        String       @id @default(uuid()) @postgresql.Uuid
  createdAt DateTime?    @default(now()) @map("created_at")
  title     String       @default("")
  members   TeamMember[] @relation("TeamMember_team")
}

model TeamMember {
  id     String           @id @default(uuid()) @postgresql.Uuid
  name   String           @default("")
  team   Team?            @relation("TeamMember_team", fields: [teamId], references: [id])
  teamId String?          @map("team") @postgresql.Uuid
  roles  TeamMemberRole[] @relation("TeamMember_roles")

  @@index([teamId])
}

model TeamMemberRole {
  id                    String       @id @default(uuid()) @postgresql.Uuid
  title                 String       @default("")
  from_TeamMember_roles TeamMember[] @relation("TeamMember_roles")
}

model Concert {
  id         String    @id @default(uuid()) @postgresql.Uuid
  createdAt  DateTime? @default(now()) @map("created_at")
  dateFrom   DateTime?
  dateTo     DateTime?
  group      String
  location   Location? @relation("Concert_location", fields: [locationId], references: [id])
  locationId String?   @map("location") @postgresql.Uuid
  program    Piece[]   @relation("Concert_program")

  @@index([dateFrom])
  @@index([dateTo])
  @@index([group])
  @@index([locationId])
}

model Piece {
  id                   String    @id @default(uuid()) @postgresql.Uuid
  composer             String    @default("")
  title                String    @default("")
  description          String    @default("")
  support              String    @default("")
  from_Concert_program Concert[] @relation("Concert_program")
}

model Location {
  id                    String    @id @default(uuid()) @postgresql.Uuid
  venue                 String    @default("")
  city                  String    @default("")
  support               String    @default("")
  from_Concert_location Concert[] @relation("Concert_location")
}